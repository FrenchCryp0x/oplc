name: smoke

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '18 */6 * * *'  # every 6 hours

env:
  API: https://r3ddkahili-oplc-api.hf.space
  UI:  https://r3ddkahili-oplc-ui.hf.space

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:
      - name: Show targets
        run: |
          echo "API=$API"
          echo "UI=$UI"

      - name: DNS + warmup
        run: |
          set -euxo pipefail
          API_HOST=$(echo "$API" | sed -E 's#https?://([^/]+).*#\1#')
          UI_HOST=$(echo "$UI" | sed -E 's#https?://([^/]+).*#\1#')
          nslookup "$API_HOST" || true
          nslookup "$UI_HOST" || true
          curl -sSIL "$API/healthz" || true

      - name: Healthz (with retries)
        run: |
          for i in {1..5}; do
            RESP=$(curl -sS -m 10 "$API/healthz" || true)
            echo "attempt $i: $RESP"
            if [ "$RESP" = "ok" ]; then exit 0; fi
            sleep 5
          done
          echo "::error::/healthz failed after 5 attempts"; exit 1

      - name: Range check for known prefix (password)
        run: |
          curl -fsS --retry 3 --retry-all-errors "$API/range/5BAA6" \
            | tee /tmp/range.txt \
            | grep -q '1E4C9B93F3F0682250B6CF8331B7EE68FD8'

      - name: Range padding sanity (>= 800 lines)
        run: |
          LINES=$(wc -l < /tmp/range.txt)
          echo "lines: $LINES"
          test "$LINES" -ge 800

      - name: Verify local SHA-1 (sanity)
        run: |
          python - <<'PY'
          import hashlib
          assert hashlib.sha1(b'password').hexdigest().upper() == '5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8'
          print('ok')
          PY

      - name: UI reachable (status + title/h1)
        run: |
          STATUS=$(curl -sS -o /dev/null -L -w "%{http_code}" "$UI/")
          echo "UI HTTP status: $STATUS"
          if [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 400 ]; then
            echo "::error::UI returned HTTP $STATUS"; exit 1
          fi
          HTML="$(curl -sSL "$UI/")"
          echo "$HTML" | head -n 40
          echo "$HTML" | tr -d '\r' | sed 's/&nbsp;/ /g' \
            | grep -qiE '<title>.*open password leak check.*</title>|<h1[^>]*>.*open password leak check.*</h1>|open password leak check' \
            || { echo "::error::Title/H1 not found in UI HTML"; exit 1; }
